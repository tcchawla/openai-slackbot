-- You can run these commands here, https://cloud.mindsdb.com

-- Create a new Database 'slack-api' using 'slack' engine
CREATE DATABASE slack_api
WITH
  ENGINE = 'slack',
  PARAMETERS = {
      "token": "xoxb-5180137616898-5646738410677-Q6q1PMm1qFGEiTSuHUmfVhFz"
    };

-- Retrieve the entire conversation history in the channel where you have authenticated the bot
SELECT *
FROM slack_api.channels
WHERE channel="<channel-name>"; -- Be sure to change the <channel-name>

-- Retrieve the conversation history after a specific message
SELECT *
FROM slack_api.channels
WHERE channel="<channel-name>" AND message_created_at > '2023-07-28 15:27:12'
LIMIT 2;

-- Insert a message in the channel
INSERT INTO slack_api.channels (channel, message)
VALUES("<channel-name>", "Hi, How are you?");

-- Delete a message by specifying 'ts' (timestamp) of the message
DELETE FROM slack_api.channels
WHERE channel = "<channel-name>" AND ts = "1690560612.278679";

-- Creates a GPT model using OpenAI Integration
CREATE MODEL mindsdb.gpt_model
PREDICT response
USING
engine = 'openai',
max_tokens = 300,
-- api_key = '<your-openai-api-key>', -- Please provide your own api key if you're running locally
model_name = 'gpt-3.5-turbo',
prompt_template = 'From input message: {{messages}}\
write a short response to the user in the following format:\
Hi, I am an automated bot here to help you, Can you please elaborate the issue which you are facing! âœ¨ðŸš€ ';

-- To check the status of the model
DESCRIBE MODEL mindsdb.gpt_model;

-- Get a custom response for the specified 'messages' in the 'WHERE' clause from the GPT model
SELECT
  response
FROM mindsdb.gpt_model
WHERE messages = 'Hi, can you please explain me more about MindsDB?';

-- Give a unique persona to the GPT model to get interesting responses for the user's query
CREATE MODEL mindsdb.whizfizz
PREDICT response
USING
engine = 'openai',
max_tokens = 300,
-- api_key = '<your-openai-api-key>', -- Please provide your own api key if you're running locally
model_name = 'gpt-3.5-turbo',
prompt_template = 'From input message: {{messages}}\
write a short response to some user in the following format:\
Hey, WhizFizz here! Lets dive into the cosmic abyss, where wonders persist. From stars that explode with flair to galaxies beyond compare. check out "The Elegant Universe", a mind-bending OG read. And for mind-blowing quantum tales, "Alice in Quantumland" is where curiosity prevails. So lets embark on a journey, where science and magic intertwine. Stay tuned for more enchantment! âœ¨ðŸš€ -- mdb.ai/bot by @mindsdb';

-- To check the status of the model
DESCRIBE MODEL mindsdb.whizfizz;

-- Get a custom response for the specified 'messages' in the 'WHERE' clause from the Whizfizz model
SELECT
  messages, response
FROM mindsdb.whizfizz
WHERE messages = 'Hi, can you please explain me more about MindsDB?';

-- Get the response for the user's query posted in the channel
SELECT
    t.channel as channel,
    t.messages as input_text, 
    r.response as message
FROM slack_api.channels as t
JOIN mindsdb.whizfizz as r
WHERE t.channel = '<channel-name>'
LIMIT 1;

-- Insert the response generated by the Whizfizz Model to the channel
INSERT INTO slack_api.channels (channel, message)
    SELECT
        t.channel as channel,
        t.messages as input_text, 
        r.response as message
    FROM slack_api.channels as t
    JOIN mindsdb.whizfizz as r
    WHERE t.channel = '<channel-name>'
    LIMIT 1;

-- Automate this, by creating a Job. Every minute it will respond to a single user's query
CREATE JOB mindsdb.gpt4_slack_job AS (
   -- insert into channels the output of joining model and new responses
  INSERT INTO slack_api.channels(channel, message)
  SELECT
    t.channel as channel,
    t.messages as input_text, 
    r.response as message
  FROM slack_api.channels as t
  JOIN mindsdb.whizfizz as r
  WHERE t.channel = '<channel-name>' AND t.message_created_at > "2023-07-28 16:14:14" AND t.message_created_at > "{{PREVIOUS_START_DATETIME}}"
  LIMIT 1;
)
EVERY minute;

-- To check details about the Job
SELECT * FROM jobs WHERE name="gpt4_slack_job";

-- Get the history of the running job
SELECT * FROM jobs_history WHERE name="gpt4_slack_job";

-- Drop running job
DROP JOB gpt4_slack_job;

-- Drop created database
DROP DATABASE slack_api;

-- Drop Whizfizz Model
DROP MODEL mindsdb.whizfizz;

-- Drop GPT Model
DROP MODEL mindsdb.gpt_model;